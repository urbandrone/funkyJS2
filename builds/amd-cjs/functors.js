/*! funkyjs-2 2.0.0
 *  David Hofmann <the.urban.drone@gmail.com>, MIT license */
/* globals define, module, exports, require */
!function(a,b){var c,d;if("function"==typeof define&&define.amd)define(["../type"],b);else if("object"==typeof exports)module.exports=b(require("type"));else{c=b(a.funkyJS);for(d in c)c.hasOwnProperty(d)&&(a.funkyJS[d]=c[d])}}(this,function(a){var b={};return b.forEachWith=function c(b,d){if(!a.isFunction(b))throw"forEachWith expects fn to be function but saw "+b;if(void 0===d)return function(a){return c(b,a)};if(d=a.isSequencial(d)?[].slice.call(d):null,!a.isArray(d))throw"forEachWith expects list to be array but saw "+d;return d.forEach(b),d},b.mapWith=function d(b,c){if(!a.isFunction(b))throw"mapWith expects fn to be function but saw "+b;if(void 0===c)return function(a){return d(b,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"mapWith expects list to be array but saw "+c;return c.map(b)},b.filterWith=function e(b,c){if(!a.isFunction(b))throw"filterWith expects fn to be function but saw "+b;if(void 0===c)return function(a){return e(b,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"filterWith expects list to be array but saw "+c;return c.filter(b)},b.foldWith=function f(b,c,d){if(!a.isFunction(b))throw"foldWith expects fn to be function but saw "+b;if(void 0===c)return function(a,c){return f(b,a,c)};if(void 0===d)return function(a){return f(b,c,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"foldWith expects list to be array but saw "+c;return c.reduce(b,d)},b.foldRightWith=function g(b,c,d){if(!a.isFunction(b))throw"foldRightWith expects fn to be function but saw "+b;if(void 0===c)return function(a,c){return g(b,a,c)};if(void 0===d)return function(a){return g(b,c,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"foldRightWith expects list to be array but saw "+c;return c.reduceRight(b,d)},b.everyWith=function h(b,c){if(!a.isFunction(b))throw"everyWith expects fn to be function but saw "+b;if(void 0===c)return function(a){return h(b,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"everyWith expects list to be array but saw "+c;return c.every(b)},b.someWith=function i(b,c){if(!a.isFunction(b))throw"someWith expects fn to be function but saw "+b;if(void 0===c)return function(a){return i(b,a)};if(c=a.isSequencial(c)?[].slice.call(c):null,!a.isArray(c))throw"someWith expects list to be array but saw "+c;return c.some(b)},b});