{
    "project": {
        "name": "funkyjs-2",
        "version": "0.7.0",
        "description": "Second version of funkyJS"
    },
    "files": {
        "sources\\experiments\\contracts.js": {
            "name": "sources\\experiments\\contracts.js",
            "modules": {
                "experiments": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\experiments\\functors.js": {
            "name": "sources\\experiments\\functors.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "sources\\_birds.js": {
            "name": "sources\\_birds.js",
            "modules": {
                "birds": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\_core.js": {
            "name": "sources\\_core.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "funkyJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sources\\arity.js": {
            "name": "sources\\arity.js",
            "modules": {
                "arity": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\arrays.js": {
            "name": "sources\\arrays.js",
            "modules": {
                "arrays": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\combinators.js": {
            "name": "sources\\combinators.js",
            "modules": {
                "combinators": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\decorators.js": {
            "name": "sources\\decorators.js",
            "modules": {
                "decorators": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\lambdas.js": {
            "name": "sources\\lambdas.js",
            "modules": {
                "lambda": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\objects.js": {
            "name": "sources\\objects.js",
            "modules": {
                "objects": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        },
        "sources\\type.js": {
            "name": "sources\\type.js",
            "modules": {
                "type": 1
            },
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "experiments": {
            "name": "experiments",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\experiments\\contracts.js",
            "line": 29
        },
        "birds": {
            "name": "birds",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\_birds.js",
            "line": 22
        },
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "funkyJS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "sources\\_core.js",
            "line": 24
        },
        "arity": {
            "name": "arity",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\arity.js",
            "line": 23
        },
        "arrays": {
            "name": "arrays",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\arrays.js",
            "line": 22
        },
        "combinators": {
            "name": "combinators",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\combinators.js",
            "line": 22
        },
        "decorators": {
            "name": "decorators",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\decorators.js",
            "line": 22
        },
        "lambda": {
            "name": "lambda",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\lambdas.js",
            "line": 23
        },
        "objects": {
            "name": "objects",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\objects.js",
            "line": 22
        },
        "type": {
            "name": "type",
            "submodules": {},
            "classes": {},
            "fors": {
                "funkyJS": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "sources\\type.js",
            "line": 23
        }
    },
    "classes": {
        "funkyJS": {
            "name": "funkyJS",
            "shortname": "funkyJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "sources\\_core.js",
            "line": 24,
            "description": "funkyJS 2: A JavaScript framework for functional programming",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 47,
            "description": "The onlyNil function allows only null or undefined values to pass",
            "itemtype": "method",
            "name": "onlyNil",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null|undefined"
            },
            "example": [
                "\n    funkyJS.onlyNil(null);\n    // -> null\n\n    funkyJS.onlyNil(undefined);\n    // -> undefined\n\n    funkyJS.onlyNil(1);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 68,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 86,
            "description": "The onlyVoid function allows only undefined values to pass",
            "itemtype": "method",
            "name": "onlyVoid",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Undefined"
            },
            "example": [
                "\n    funkyJS.onlyVoid(undefined);\n    // -> undefined\n\n    funkyJS.onlyVoid(null);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 104,
            "description": "The onlyString function allows only strings to pass",
            "itemtype": "method",
            "name": "onlyString",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "String"
            },
            "example": [
                "\n    funkyJS.onlyString('a string');\n    // -> 'a string'\n\n    funkyJS.onlyString(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 122,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 140,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 158,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 176,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 194,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 212,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 230,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 248,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 266,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 284,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 302,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 320,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 338,
            "description": "The onlyNull function allows only null values to pass",
            "itemtype": "method",
            "name": "onlyNull",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "No others pass",
                "type": "Null"
            },
            "example": [
                "\n    funkyJS.onlyNull(null);\n    // -> null\n\n    funkyJS.onlyNull(undefined);\n    // -> Error\n"
            ],
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\contracts.js",
            "line": 358,
            "description": "EXPORT\n======",
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\experiments\\functors.js",
            "line": 40,
            "description": "EXPORT\n======",
            "class": "funkyJS",
            "module": "experiments"
        },
        {
            "file": "sources\\_birds.js",
            "line": 30,
            "description": "The identity function (Identity/Idiot Bird) takes a argument and instantly\n    returns it",
            "itemtype": "method",
            "name": "identity",
            "params": [
                {
                    "name": "x",
                    "description": "Anything",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "Anything given",
                "type": "Any"
            },
            "example": [
                "\n    var one = funkyJS.identity(1);\n"
            ],
            "class": "funkyJS",
            "module": "birds"
        },
        {
            "file": "sources\\_birds.js",
            "line": 47,
            "description": "The constant function (Kestrel) takes a argument and returns a function\n    which will always return the given argument if called",
            "itemtype": "method",
            "name": "constant",
            "params": [
                {
                    "name": "x",
                    "description": "Anything",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "A function which always returns x",
                "type": "Function"
            },
            "example": [
                "\n    var getZero = funkyJS.constant(0);\n\n    getZero();\n    // -> 0\n\n    getZero(100);\n    // -> 0\n"
            ],
            "class": "funkyJS",
            "module": "birds"
        },
        {
            "file": "sources\\_birds.js",
            "line": 72,
            "description": "The cmps function (Bluebird) is the basic functional higher-order function\n    for function composition. It takes a function, returns a function which\n    again takes a function and returns a function taking any value which is\n    piped through both given functions from right to left",
            "itemtype": "method",
            "name": "cmps",
            "params": [
                {
                    "name": "f",
                    "description": "A function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Function taking a second function",
                "type": "Function"
            },
            "example": [
                "\n    var toInt32 = function (s) {\n        return parseInt('' + s, 10);\n    }\n\n    var add10 = function (n) {\n        return n + 10;\n    }\n\n    var toIntPlus10 = funkyJS.cmps(add10)(toInt32);\n    toIntPlus10('300px');\n    // -> 310\n"
            ],
            "class": "funkyJS",
            "module": "birds"
        },
        {
            "file": "sources\\arity.js",
            "line": 40,
            "description": "The aritize function takes a number and returns a function which has a arity\n    of exactly that length. A optional second argument allows to create a\n    loosely aritized function, which acts much like a variadic function, but\n    packs all the given arguments into a array. A call to aritize returns a\n    function, which awaits a function describing the operation applied to the\n    given arguments (either loosely or strict)",
            "itemtype": "method",
            "name": "aritize",
            "params": [
                {
                    "name": "arity",
                    "description": "The arity of the original function",
                    "type": "Number"
                },
                {
                    "name": "[loose",
                    "description": "= false] Return a loose or strict function",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A wrapper function with correct arity",
                "type": "Function"
            },
            "example": [
                "\n    var max = function () {\n        return Math.max.apply(null, arguments);\n    }\n\n    max(1, 2, 3, 4, 5);\n    // -> 5\n\n    max.length;\n    // -> 0\n\n    var fixedMax = funkyJS.aritize(3)(max);\n\n    fixedMax(1, 2, 3, 4, 5);\n    // -> 3\n\n    fixedMax.length;\n    // -> 3\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 108,
            "description": "The niladic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to zero. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If more arguments are passed than the arity of the given function is, the\n    arguments which are too many will be ignored",
            "itemtype": "method",
            "name": "niladic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var say = function (sentence) {\n        return sentence || '---';\n    }\n\n    say('hello');\n    // -> 'hello'\n\n    var dontSay = funkyJS.niladic(say);\n\n    dontSay('hello');\n    // -> '---'\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 148,
            "description": "The monadic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to one. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If more arguments are passed than the arity of the given function is, the\n    arguments which are too many will be ignored",
            "itemtype": "method",
            "name": "monadic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var sayTo = function (sentence, receiver) {\n        return sentence + ' ' + (receiver.name || 'nobody');\n    }\n\n    sayTo('hello', {name: 'joe'});\n    // -> 'hello joe'\n\n    var sayToNobody = funkyJS.monadic(sayTo);\n\n    sayToNobody('hello', {name: 'joe'});\n    // -> 'hello nobody'\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 192,
            "description": "The dyadic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to two. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If more arguments are passed than the arity of the given function is, the\n    arguments which are too many will be ignored",
            "itemtype": "method",
            "name": "dyadic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var sayTo = function (sentence, receiver) {\n        return sentence + ' ' + (receiver.name || 'nobody');\n    }\n\n    sayTo('hello', {name: 'joe'});\n    // -> 'hello joe'\n\n    var sayToCurried = funkyJS.dyadic(sayTo);\n\n    var greet = sayToCurried('hello');\n\n    greet({name: 'joe'});\n    // -> 'hello joe'\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 244,
            "description": "The triadic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to three. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If more arguments are passed than the arity of the given function is, the\n    arguments which are too many will be ignored",
            "itemtype": "method",
            "name": "triadic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var sayTo = function (sentence, symbol, receiver) {\n        return sentence + '' + symbol + '' + (receiver.name || 'nobody');\n    }\n\n    sayTo('hello', ', ', {name: 'joe'});\n    // -> 'hello, joe'\n\n    var sayToCurried = funkyJS.triadic(sayTo);\n\n    var greet = sayToCurried('hello', ', ');\n\n    greet({name: 'joe'});\n    // -> 'hello, joe'\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 302,
            "description": "The tetradic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to four. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If more arguments are passed than the arity of the given function is, the\n    arguments which are too many will be ignored",
            "itemtype": "method",
            "name": "tetradic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var takeAll = function () {\n        return funkyJS.toArray(arguments);\n    }\n\n    takeAll(1, 2, 3, 4, 5);\n    // -> [1, 2, 3, 4, 5]\n\n    var takeFour = funkyJS.tetradic(takeAll);\n\n    takeFour(1, 2, 3, 4, 5);\n    // -> [1, 2, 3, 4]\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 364,
            "description": "The polyadic function restricts the number of arguments (a functions arity) that\n    are needed to execute a function to two or more. It takes a function and returns\n    a function which takes arguments until the given function can be executed.\n    If too less arguments are given to the returned accumulator function, a\n    new accumulator function is returned.",
            "itemtype": "method",
            "name": "polyadic",
            "params": [
                {
                    "name": "f",
                    "description": "The function to restrict",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A curried, restricted variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var takeAll = function () {\n        return funkyJS.toArray(arguments);\n    }\n\n    takeAll(1, 2, 3, 4, 5);\n    // -> [1, 2, 3, 4, 5]\n\n    var takeTwoOrMore = funkyJS.polyadic(takeAll);\n\n    takeTwoOrMore(1, 2);\n    // -> [1, 2]\n\n    takeTwoOrMore(1);\n    // -> function accumulator\n\n    takeTwoOrMore(1, 2, 3);\n    // -> [1, 2, 3]\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arity.js",
            "line": 419,
            "description": "The variadic function transforms any function which takes at least one argument\n    (unary function) into a function which takes a variable number or arguments\n    (multary function) by providing the overhanging arguments combined into\n    a array with the regular last argument",
            "itemtype": "method",
            "name": "variadic",
            "params": [
                {
                    "name": "f",
                    "description": "The original (not multary) function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A multary variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var unary = function (a) {\n        return a;\n    }\n\n    var binary = function (a, b) {\n        return [a, b];\n    }\n\n    unary(1, 2, 3);\n    // -> 1\n\n    binary(1, 2, 3);\n    // -> [1, 2]\n\n    var variUnary = funkyJS.variadic(unary);\n    var variBinary = funkyJS.variadic(binary);\n\n    variUnary(1, 2, 3);\n    // -> [1, 2, 3]\n\n    variBinary(1, 2, 3);\n    // -> [1, [2, 3]]\n"
            ],
            "class": "funkyJS",
            "module": "arity"
        },
        {
            "file": "sources\\arrays.js",
            "line": 35,
            "description": "The toArray function takes in any enumerable value (arrays, nodelists, strings,\n    objects, arguments) and transforms it into a real array. If the given\n    value is not enumerable, it will be wrapped into a array",
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "x",
                    "description": "Anything",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "Array from enumerable or array with given value",
                "type": "Array"
            },
            "example": [
                "\n    funkyJS.toArray([1, 2, 3]);\n    // -> [1, 2, 3]\n\n    funkyJS.toArray({ a: 1, b: 2, c: 3 });\n    // -> [1, 2, 3]\n\n    funkyJS.toArray(null);\n    // -> [null]\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 82,
            "description": "The first function returns the first item of any sequencial value given. For\n    not sequencial values the given value is returned",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "The first item",
                "type": "Any"
            },
            "example": [
                "\n    funkyJS.first(['a', 'b', 'c']);\n    // -> 'a'\n\n    funkyJS.first('some string');\n    // -> 's'\n\n    funkyJS.first(null);\n    // -> null\n\n    funkyJS.first()(['a', 'b', 'c']);\n    // -> 'a'\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 117,
            "description": "The last function returns the last item of any sequencial value given. For\n    not sequencial values the given value is returned",
            "itemtype": "method",
            "name": "last",
            "params": [
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "The last item",
                "type": "Any"
            },
            "example": [
                "\n    funkyJS.last(['a', 'b', 'c']);\n    // -> 'c'\n\n    funkyJS.last('some string');\n    // -> 'g'\n\n    funkyJS.last(null);\n    // -> null\n\n    funkyJS.last()(['a', 'b', 'c']);\n    // -> 'c'\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 152,
            "description": "The head function returns all but the last item of any sequencial value given.\n    For not sequencial values the given value is returned",
            "itemtype": "method",
            "name": "head",
            "params": [
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "The head items",
                "type": "Array"
            },
            "example": [
                "\n    funkyJS.head(['a', 'b', 'c']);\n    // -> ['a', 'b']\n\n    funkyJS.head('some string');\n    // -> 'some strin'\n\n    funkyJS.head(null);\n    // -> null\n\n    funkyJS.head()(['a', 'b', 'c']);\n    // -> ['a', 'b']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 187,
            "description": "The tail function returns all but the first item of any sequencial value given.\n    For not sequencial values the given value is returned",
            "itemtype": "method",
            "name": "tail",
            "params": [
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "The tail items",
                "type": "Array"
            },
            "example": [
                "\n    funkyJS.tail(['a', 'b', 'c']);\n    // -> ['b', 'c']\n\n    funkyJS.tail('some string');\n    // -> 'ome string'\n\n    funkyJS.tail(null);\n    // -> null\n\n    funkyJS.tail()(['a', 'b', 'c']);\n    // -> ['b', 'c']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 222,
            "description": "Given a index number and any sequencial value, the nth function returns the\n    item on the given index position or null if no such item can be found or\n    the given value is not sequencial",
            "itemtype": "method",
            "name": "nth",
            "params": [
                {
                    "name": "n",
                    "description": "Index of the item to return",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "The item on position n or null",
                "type": "Any"
            },
            "example": [
                "\n    funkyJS.nth(1, ['a', 'b', 'c']);\n    // -> 'b'\n\n    funkyJS.nth(1, 'some string');\n    // -> 'o'\n\n    funkyJS.nth(1, null);\n    // -> null\n\n    funkyJS.nth(1)()(['a', 'b', 'c']);\n    // -> 'b'\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 269,
            "description": "The take function returns a new array from a given sequencial with as many\n    items taken from the beginning of the given value as specified",
            "itemtype": "method",
            "name": "take",
            "params": [
                {
                    "name": "n",
                    "description": "The amount of items to take into a new array",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "Array of n items from the left of the given sequencial value",
                "type": "Array"
            },
            "example": [
                "\n    funkyJS.take(2, ['a', 'b', 'c', 'd']);\n    // -> ['a', 'b']\n\n    funkyJS.take(4, 'some string');\n    // -> ['s', 'o', 'm', 'e']\n\n    funkyJS.take(2, null);\n    // -> null\n\n    funkyJS.take(2)()(['a', 'b', 'c', 'd']);\n    // -> ['a', 'b']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 315,
            "description": "The drop function returns a new array from a given sequencial with as many\n    items dropn from the beginning of the given value as specified",
            "itemtype": "method",
            "name": "drop",
            "params": [
                {
                    "name": "n",
                    "description": "The amount of items to drop into a new array",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The sequencial value",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "Array of n items from the left of the given sequencial value",
                "type": "Array"
            },
            "example": [
                "\n    funkyJS.drop(2, ['a', 'b', 'c', 'd']);\n    // -> ['c', 'd']\n\n    funkyJS.drop(5, 'some string');\n    // -> ['s', 't', 'r', 'i', 'n', 'g']\n\n    funkyJS.drop(2, null);\n    // -> null\n\n    funkyJS.drop(2)()(['a', 'b', 'c', 'd']);\n    // -> ['c', 'd']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 361,
            "description": "Given two sequencial values, the append function adds the first one to the\n    end of the second one",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "a1",
                    "description": "The sequence to append",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "The sequence to append a1 to",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "a1 after the sequence of a2",
                "type": "Array"
            },
            "example": [
                "\n    var newTail = [1, 2, 3];\n\n    funkyJS.append(newTail, ['a', 'b', 'c']);\n    // -> ['a', 'b', 'c', 1, 2, 3]\n\n    funkyJS.append(newTail, null);\n    // -> null\n\n    funkyJS.append(newTail)()(['a', 'b', 'c']);\n    // -> ['a', 'b', 'c', 1, 2, 3]\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 403,
            "description": "Given two sequencial values, the prepend function adds the first one to the\n    end of the second one",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "a1",
                    "description": "The sequence to prepend",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "The sequence a1 should preceede",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "a1 before the sequence of a2",
                "type": "Array"
            },
            "example": [
                "\n    var newHead = [1, 2, 3];\n\n    funkyJS.prepend(newHead, ['a', 'b', 'c']);\n    // -> [1, 2, 3, 'a', 'b', 'c']\n\n    funkyJS.prepend(newHead, null);\n    // -> null\n\n    funkyJS.prepend(newHead)()(['a', 'b', 'c']);\n    // -> [1, 2, 3, 'a', 'b', 'c']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 445,
            "description": "Given three sequencial values, the surround function adds the first one to the\n    head and the second one to the tail of the third value.",
            "itemtype": "method",
            "name": "surround",
            "params": [
                {
                    "name": "a1",
                    "description": "The head sequence",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "The tail sequence",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "target",
                    "description": "The sequence to be surrounded",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "Target between a1 and a2",
                "type": "Array"
            },
            "example": [
                "\n    var newHead = ['a', 'b', 'c'];\n    var newTail = ['x', 'y', 'z'];\n\n    funkyJS.surround(newHead, newTail, ['m', 'n', 'o']);\n    // -> ['a', 'b', 'c', 'm', 'n', 'o', 'x', 'y', 'z']\n\n    funkyJS.surround(newHead, newTail, null);\n    // -> null\n\n    funkyJS.surround(newHead)(newTail)(['m', 'n', 'o']);\n    // -> ['a', 'b', 'c', 'm', 'n', 'o', 'x', 'y', 'z']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 496,
            "description": "The unique function takes a sequencial value and returns a new array from it\n    which contains only the unique items",
            "itemtype": "method",
            "name": "unique",
            "params": [
                {
                    "name": "a",
                    "description": "The original sequencial",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "Array with only the unique values from a",
                "type": "Array"
            },
            "example": [
                "\n    var original = ['a', 'c', 'b', 'b', 'a', 'a', 'f', 'k', 'a', 'b', 'f', 'c'];\n\n    funkyJS.unique(original);\n    // -> ['a', 'c', 'b', 'f', 'k']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 529,
            "description": "The flatten function flattens any given nested sequencial value. A optional\n    second parameter determines the maximum number of iterations are used\n    until the process is terminated. The default amount of maximum iterations\n    is Infinity",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "a1",
                    "description": "The nested sequencial",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "[maxIterations",
                    "description": "= Infinity] Max. Number of Iterations",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new flat version of the given array",
                "type": "Array"
            },
            "example": [
                "\n    var singleLevel = [['a', 'b'], ['c', 'd'], 'e'];\n    var multiLevel = [[[['a', 'b']], ['c']], 'd', [[[['e']]]]];\n\n    funkyJS.flatten(singleLevel);\n    // -> ['a', 'b', 'c', 'd', 'e'];\n\n    funkyJS.flatten(multiLevel);\n    // -> ['a', 'b', 'c', 'd', 'e'];\n\n    funkyJS.flatten(multiLevel, 1);\n    // -> [[['a', 'b']], [c], 'd', [[['d']]]];\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 578,
            "description": "Given two sequencial values, the union function returns a new array which\n    contains the unique values of both",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "a1",
                    "description": "First sequencial",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "Second sequencial",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "New array containing the union of a1 and a2",
                "type": "Array"
            },
            "example": [
                "\n    var first = ['a', 'h', 'e', 'c', 'b', 'f'];\n    var second = ['c', 'd', 'a', 'f', 'e', 'h'];\n\n    funkyJS.union(first, second);\n    // -> ['a', 'h', 'e', 'c', 'b', 'f', 'd']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 612,
            "description": "Given two sequencial values, the intersect function returns a new array which\n    contains the intersection of both",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "a1",
                    "description": "First sequencial",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "Second sequencial",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "New array containing the intersection of a1 and a2",
                "type": "Array"
            },
            "example": [
                "\n    var first = ['a', 'h', 'e', 'c', 'b', 'f'];\n    var second = ['c', 'd', 'a', 'f', 'e', 'h'];\n\n    funkyJS.intersect(first, second);\n    // -> ['a', 'h', 'e', 'c', 'f']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\arrays.js",
            "line": 654,
            "description": "Given two sequencial values, the difference function returns a new array which\n    contains the difference of both",
            "itemtype": "method",
            "name": "difference",
            "params": [
                {
                    "name": "a1",
                    "description": "First sequencial",
                    "type": "Array|nodelist|arguments|string"
                },
                {
                    "name": "a2",
                    "description": "Second sequencial",
                    "type": "Array|nodelist|arguments|string"
                }
            ],
            "return": {
                "description": "New array containing the difference of a1 and a2",
                "type": "Array"
            },
            "example": [
                "\n    var first = ['a', 'h', 'e', 'c', 'b', 'f'];\n    var second = ['c', 'd', 'a', 'f', 'e', 'h'];\n\n    funkyJS.difference(first, second);\n    // -> ['b', 'd']\n"
            ],
            "class": "funkyJS",
            "module": "arrays"
        },
        {
            "file": "sources\\combinators.js",
            "line": 54,
            "description": "The compose function allows to create a function from a set of functions. The\n    returned function executes the given set of functions from right to left\n    and returns the final result of all applications to the arguments given",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "fn1",
                    "description": "One to N functions to compose together",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The composed functions as a new function",
                "type": "Function"
            },
            "example": [
                "\n    var hello = function (name) { return 'hello ' + name; }\n    var shout = function (sentence) { return sentence.toUpperCase() + '!'; }\n\n    var shoutHello = funkyJS.compose(shout, hello);\n    hello('joe');\n    // -> 'hello joe'\n\n    shout('joe');\n    // -> 'JOE!'\n\n    shoutHello('joe');\n    // -> 'HELLO JOE!'\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 98,
            "description": "The pipe function allows to create a function from a set of functions. The\n    returned function executes the given set of functions from left to right\n    and returns the final result of all applications to the arguments given",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "fn1",
                    "description": "One to N functions to pipe through",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The piped functions as a new function",
                "type": "Function"
            },
            "example": [
                "\n    var greet = function (name) { return 'good evening ' + name; }\n    var bePoliteTo = function (name) { return name + ', are you fine today?'; }\n\n    var greetAndBePoliteTo = funkyJS.pipe(greet, bePoliteTo);\n    greet('joe');\n    // -> 'good evening joe'\n\n    bePoliteTo('joe');\n    // -> 'joe, are you fine today?'\n\n    greetAndBePoliteTo('joe');\n    // -> 'good evening joe, are you fine today?'\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 142,
            "description": "The curry function allows to return a function from a given function, which\n    splits the application of the given function into multiple steps. The\n    returned function returns itself functions, until enough arguments to\n    execute the originally given function",
            "itemtype": "method",
            "name": "curry",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to curry",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The curried function",
                "type": "Function"
            },
            "example": [
                "\n    var add = funkyJS.curry(function (a, b) {\n        return a + b;\n    });\n\n    add('a')('z');\n    // -> 'az'\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 185,
            "description": "The curryRight function allows to return a function from a given function, which\n    splits the application of the given function into multiple steps. The\n    returned function returns itself functions, until enough arguments to\n    execute the originally given function. The collected arguments are reversed\n    before applied",
            "itemtype": "method",
            "name": "curryRight",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to curry",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The curried function",
                "type": "Function"
            },
            "example": [
                "\n    var add = funkyJS.curryRight(function (a, b) {\n        return a + b;\n    });\n\n    add('a')('z');\n    // -> 'za'\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 229,
            "description": "The partial function allows to partially apply a function to a set of arguments\n    by leaving the context unbound. It returns a funciton, which collects\n    arguments until enough arguments are collected to execute the partially\n    applied function. funkyJS.partial also allows to leave holes in the list\n    of arguments preset to a function by passing the undefined value",
            "itemtype": "method",
            "name": "partial",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to partially apply",
                    "type": "Function"
                },
                {
                    "name": "partials",
                    "description": "The argument values to preset (ltr)",
                    "type": "Array|*",
                    "optional": true
                }
            ],
            "return": {
                "description": "The partially applied function",
                "type": "Function"
            },
            "example": [
                "\n    var format = function (prefix, value, postfix) {\n        return prefix + ' ' + value + ' ' + postfix;\n    }\n\n    var formatBtn = funkyJS.partial(format, [\n        'this is',\n        undefined,\n        'button'\n    ]);\n\n    formatBtn('joe');\n    // -> 'this is joe button';\n\n    formatBtn('a');\n    // -> 'this is a button';\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 317,
            "description": "The partialRight function allows to partially apply a function to a set of arguments\n    by leaving the context unbound. It returns a funciton, which collects\n    arguments until enough arguments are collected to execute the partially\n    applied function. funkyJS.partialRight also allows to leave holes in the list\n    of arguments preset to a function by passing the undefined value. The\n    accumulated arguments are reversed before the function is applied to them",
            "itemtype": "method",
            "name": "partialRight",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to partially apply",
                    "type": "Function"
                },
                {
                    "name": "partials",
                    "description": "The argument values to preset (rtl)",
                    "type": "Array|*",
                    "optional": true
                }
            ],
            "return": {
                "description": "The partially applied function",
                "type": "Function"
            },
            "example": [
                "\n    var format = function (prefix, value, postfix) {\n        return prefix + ' ' + value + ' ' + postfix;\n    }\n\n    var formatBtnR = funkyJS.partialRight(format, [\n        'button',\n        undefined,\n        'this is'\n    ]);\n\n    formatBtnR('joe');\n    // -> 'this is joe button';\n\n    formatBtnR('a');\n    // -> 'this is a button';\n"
            ],
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\combinators.js",
            "line": 408,
            "description": "EXPORT\n======",
            "class": "funkyJS",
            "module": "combinators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 56,
            "description": "Given a function, the flip function returns a function which takes in the\n    number of arguments from the given one but applies the arguments to the\n    given function reversed",
            "itemtype": "method",
            "name": "flip",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to apply reversed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A accumulator function",
                "type": "Function"
            },
            "example": [
                "\n    var greets = function (a, b) {\n        return 'hello ' + a + ', my name is ' + b;\n    }\n\n    greets('joe', 'jane');\n    // -> 'hello joe, my name is jane'\n\n    funkyJS.flip(greets)('joe', 'jane');\n    // -> 'hello jane, my name is joe'\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 101,
            "description": "The fluent function returns a fluent version of any given function so one can\n    chain method calls together (like in jQuery)",
            "itemtype": "method",
            "name": "fluent",
            "params": [
                {
                    "name": "fn",
                    "description": "The original function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A fluent variant of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var staticClass = {\n        foo: function () {\n            // does something\n        },\n        bar: function () {\n            // does another thing\n        }\n    }\n\n    staticClass.foo().bar();\n    // -> Error: Cannot call method \"bar\" of undefined\n\n    staticClass.foo = funkyJS.fluent(staticClass.foo);\n    staticClass.bar = funkyJS.fluent(staticClass.bar);\n\n    staticClass.foo().bar();\n    // -> Works like a charm now\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 145,
            "description": "Given a predicate and a operator function, the guard function returns a function\n    which only executes the operator if the arguments given pass the predicate\n    function. Otherwise `null` is returned",
            "itemtype": "method",
            "name": "guard",
            "params": [
                {
                    "name": "predicate",
                    "description": "The guarding/predicate function",
                    "type": "Function"
                },
                {
                    "name": "fn",
                    "description": "The operator function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A guarded function",
                "type": "Function"
            },
            "example": [
                "\n    var operand = function (str) {\n        return str.toUpperCase();\n    }\n\n    var guardedOperand = funkyJS.guard(funkyJS.isString, operand);\n\n    operand('joe');\n    // -> 'JOE'\n\n    guardedOperand('joe');\n    // -> 'JOE'\n\n    operand(1);\n    // -> TypeError: undefined is not a function\n\n    guardedOperand(1);\n    // -> null, no error\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 203,
            "description": "The maybe function takes a function and returns a guarded function which is\n    only executed, if none of the arguments it is applied to is `null` or\n    `undefined`. Otherwise `null` is returned",
            "itemtype": "method",
            "name": "maybe",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to execute maybe",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A guarded function",
                "type": "Function"
            },
            "example": [
                "\n    var queryAll = function (selector, root) {\n        return root.querySelectorAll(selector);\n    }\n\n    var maybeQueryAll = funkyJS.maybe(function (selector, root) {\n        return root.querySelectorAll(selector);\n    });\n\n\n    queryAll('div', document);\n    // -> Nodelist[<div>, <div>, <div>, ...]\n\n    maybeQueryAll('div', document);\n    // -> Nodelist[<div>, <div>, <div>, ...]\n\n    queryAll('div');\n    // -> TypeError: Cannot read property 'querySelectorAll' of undefined\n\n    maybeQueryAll('div');\n    // -> null, no error\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 250,
            "description": "The not function takes a function as argument and returns a function which\n    when applied returns the opposite boolean result of the given function",
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to negate",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function giving the opposite boolean result of fn",
                "type": "Function"
            },
            "example": [
                "\n    var sayYes = function () { return true; }\n    var sayNo = funkyJS.not(sayYes);\n\n    sayYes();\n    // -> true\n\n    sayNo();\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 284,
            "description": "Given a function, the splat function returns a function which takes either\n    a array as single argument or a unlimited number of arguments and returns\n    a new array with the given function mapped to the array or to all the\n    arguments provided. It is some kind of `<array>`.mapWith(fn)",
            "itemtype": "method",
            "name": "splat",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to \"splat\" onto the arguments/array values",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function awaiting arguments or a array",
                "type": "Function"
            },
            "example": [
                "\n    var multiply = function (n) {\n        return n * n;\n    }\n\n    var multiplyAll = funkyJS.splat(multiply);\n\n    var array = [1, 2, 3];\n\n\n    // old way, before ES5, works with (nearly) everything\n    var i, l, mapped;\n    for (i = 0, l = array.length, mapped = []; i < l; i += 1) {\n        mapped.push(multiply(array[i]));\n    }\n    // -> [1, 4, 9] (= mapped)\n\n    // new way, with ES5, works only on arrays\n    array.map(multiply);\n    // -> [1, 4, 9]\n\n    // more reusable version, works with (nearly) everything\n    multiplyAll(array);\n    // -> [1, 4, 9]\n\n    multiplyAll(4, 8, 16);\n    // -> [16, 64, 256]\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 342,
            "description": "Given a number of milliseconds and a function, the debounce function returns\n    a function which calls the given function debounced for the given amount\n    of milliseconds. Every new call to the returned function debounces the\n    invocation further.",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "ticks",
                    "description": "Milliseconds to debounce",
                    "type": "Number"
                },
                {
                    "name": "fn",
                    "description": "Function to debounce",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function which calls fn debounced",
                "type": "Function"
            },
            "example": [
                "\n    var recalcComplexLayout = function () {\n        // does some complex layout recalculations\n    }\n\n    window.onresize = funkyJS.debounce(250, recalcComplexLayout);\n    // recalcComplexLayout is only called 250ms after the last resize action\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 402,
            "description": "Given a function, the memoize function returns a memoized version of that\n    function",
            "itemtype": "method",
            "name": "memoize",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to return a memoized version from",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A memoized version of the given function",
                "type": "Function"
            },
            "example": [
                "\n    var complexCalculation = function (numInput) {\n        // does some complex calculation with the given number\n    }\n\n    var complexCalcMemo = funkyJS.memoize(complexCalculation);\n    // -> returns result of any number given before immediatly (without recalculation)\n"
            ],
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\decorators.js",
            "line": 445,
            "description": "EXPORT\n======",
            "class": "funkyJS",
            "module": "decorators"
        },
        {
            "file": "sources\\lambdas.js",
            "line": 42,
            "description": "The lambda function creates new functions from string expressions and returns\n    them. See also the example below for a example of what the lambda function\n    does.\n\nA \"->\" separates the arguments from the function body. If the expression\n    contains a underscore \"_\", this is the argument. By chaining \"->\" between\n    the argument names, a curried function is created.\n\nIf the expression begins or ends with an operator or relation, the\n    argument is appended/prepended (note that the expression cannot begin\n    with a \"-\").",
            "itemtype": "method",
            "name": "lambda",
            "params": [
                {
                    "name": "f",
                    "description": "Function or string expression",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "A lambda function",
                "type": "Function"
            },
            "example": [
                "\n    var square = funkyJS.lambda('x -> x * x');\n    square(2);\n    // => 4\n\n    var aPlusB = funkyJS.lambda('x, y -> x + y');\n    aPlusB('hello', 'world');\n    // => 'hello world'\n\n\n    var double = funkyJS.lambda('_ * 2');\n    double(2);\n    // => 4\n\n\n    var divide4By = funkyJS.lambda('4/');\n    divide4By(2);\n    // => 2\n\n\n    var ifElse = funkyJS.lambda('x -> y -> z -> !!x ? y : z');\n    ifElse(true)('yep')('nope');\n    // => 'yep'\n\n    ifElse(false)('yep')('nope');\n    // => 'nope'\n"
            ],
            "class": "funkyJS",
            "module": "lambda"
        },
        {
            "file": "sources\\objects.js",
            "line": 38,
            "description": "Takes a property or method name and a object and returns true if the object\n    has the property (not inherited) or false if not",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "s",
                    "description": "Name of the property or method",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "The object to test against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the property exists, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar'\n    }\n\n    funkyJS.has('foo', dict);\n    // -> true\n\n    funkyJS.has('howdy', dict);\n    // -> false\n\n    funkyJS.has('foo')(dict);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 77,
            "description": "Takes a property or method name and a object and returns the propertyvalue\n    on the object if it exists, otherwise null",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "s",
                    "description": "Name of the property or method",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "The object to get the value from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value of the property or null if it does not exist",
                "type": "Any|null"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar'\n    }\n\n    funkyJS.get('foo', dict);\n    // -> 'bar'\n\n    funkyJS.get('howdy', dict);\n    // -> null\n\n    funkyJS.get('foo')(dict);\n    // -> 'bar'\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 123,
            "description": "Takes a property or method name and a array of objects and returns the value\n    on the named property/method for each object as a new array if it exists\n    otherwise it returns null",
            "itemtype": "method",
            "name": "pluck",
            "params": [
                {
                    "name": "s",
                    "description": "Name of the property or method",
                    "type": "String"
                },
                {
                    "name": "os",
                    "description": "Array of objects to get the value from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The collected values or null if the value has not existed",
                "type": "Array"
            },
            "example": [
                "\n    var dicts = [{\n        foo: 'bar'\n    }, {\n        foo: 'baz'\n    }, {\n        foo: 'bam'\n    }];\n\n    funkyJS.pluck('foo', dicts);\n    // -> ['bar', 'baz', 'bam']\n\n    funkyJS.pluck('howdy', dict);\n    // -> [null, null, null]\n\n    funkyJS.pluck('foo')(dict);\n    // -> ['bar', 'baz', 'bam']\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 171,
            "description": "Given a object, the keys function returns the keys of the object or a empty\n    array if anything other than a object is given",
            "itemtype": "method",
            "name": "keys",
            "params": [
                {
                    "name": "o",
                    "description": "The object to get the keys from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of all keys as strings or empty array",
                "type": "Array"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar',\n        goo: 'car'\n    }\n\n    funkyJS.keys(dict);\n    // -> ['foo', 'goo']\n\n    funkyJS.keys(null);\n    // -> []\n\n    funkyJS.keys()(dict)\n    // -> ['foo', 'goo']\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 208,
            "description": "The values function returns the values of a given object as array or a empty\n    array if no values are present or anything other than a object is given",
            "itemtype": "method",
            "name": "values",
            "params": [
                {
                    "name": "o",
                    "description": "The object to get the values from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of all values or empty array",
                "type": "Array"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar',\n        goo: 'car'\n    }\n\n    funkyJS.values(dict);\n    // -> ['bar', 'car']\n\n    funkyJS.values(null);\n    // -> []\n\n    funkyJS.values()(dict);\n    // -> ['bar', 'car']\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 241,
            "description": "The methods function takes a object and returns the keys of all functions\n    that can be found on the object as array of strings or a empty array if\n    no functions are found or a non object is given",
            "itemtype": "method",
            "name": "methods",
            "params": [
                {
                    "name": "o",
                    "description": "The object to get the functions from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of method names or empty array",
                "type": "Array"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar',\n        goo: 'car',\n        toString: function () {\n            return 'Dictionary(foo, goo)';\n        }\n    }\n\n    funkyJS.methods(dict);\n    // -> ['toString']\n\n    funkyJS.methods(null);\n    // -> []\n\n    funkyJS.methods()(dict);\n    // -> ['toString']\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 278,
            "description": "If given a object, the pairs method returns a array of key-value pairs as\n    arrays or a empty array if a non-object is given",
            "itemtype": "method",
            "name": "pairs",
            "params": [
                {
                    "name": "o",
                    "description": "The object to get the pairs from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of key-value pairs or empty array",
                "type": "Array"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar',\n        goo: null\n    }\n\n    funkyJS.pairs(dict);\n    // -> [[foo, 'bar'], [goo, null]]\n\n    funkyJS.pairs(null);\n    // -> []\n\n    funkyJS.pairs()(dict);\n    // -> [[foo, 'bar'], [goo, null]]\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 311,
            "description": "The inverse function takes in a object and returns a copy of it with the keys\n    and the values reversed, so that the keys become the values and vice-versa.\n    Note that the values should be unique and serializable to a string",
            "itemtype": "method",
            "name": "inverse",
            "params": [
                {
                    "name": "o",
                    "description": "The object to inverse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A copy of the given object or null",
                "type": "Object|null"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar',\n        goo: 'car'\n    }\n\n    funkyJS.inverse(dict);\n    // -> { bar: 'foo', car: 'goo' }\n\n    funkyJS.inverse(null);\n    // -> null\n\n    funkyJS.inverse()(dict);\n    // -> { bar: 'foo', car: 'goo' }\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 355,
            "description": "The extend method takes in two objects and extends the first one with the\n    last one. See also the extendWith method",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "o",
                    "description": "The destination to extend",
                    "type": "Object"
                },
                {
                    "name": "s",
                    "description": "The extension",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The extended destination",
                "type": "Object"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar'\n    }\n\n    var ext = {\n        goo: 'car'\n    }\n\n    funkyJS.extend(dict, ext);\n    // -> { foo: 'bar', goo: 'car' }\n\n    funkyJS.extend(dict, null);\n    // -> { foo: 'bar' }\n\n    funkyJS.extend(null, ext);\n    // -> null\n\n    funkyJS.extend(null, null);\n    // -> null\n\n    funkyJS.extend(dict)()(ext);\n    // -> { foo: 'bar', goo: 'car' }\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 411,
            "description": "The extendWith method takes in two objects and extends the last one with the\n    first one. See also the extend method",
            "itemtype": "method",
            "name": "extendWith",
            "params": [
                {
                    "name": "s",
                    "description": "The extension",
                    "type": "Object"
                },
                {
                    "name": "o",
                    "description": "The destination to extend",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The extended destination",
                "type": "Object"
            },
            "example": [
                "\n    var dict = {\n        foo: 'bar'\n    }\n\n    var ext = {\n        goo: 'car'\n    }\n\n    funkyJS.extendWith(ext, dict);\n    // -> { foo: 'bar', goo: 'car' }\n\n    funkyJS.extendWith(ext, null);\n    // -> null\n\n    funkyJS.extendWith(null, dict);\n    // -> { foo: 'bar' }\n\n    funkyJS.extendWith(null, null);\n    // -> null\n\n    funkyJS.extendWith(ext)()(dict);\n    // -> { foo: 'bar', goo: 'car' }\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 460,
            "description": "The inherits method is designed to work particularly well with constructor\n    functions. It takes a two object, from which the first one is the source\n    and the second one is the extension on the source. The returned value is\n    a new object to use as prototype",
            "itemtype": "method",
            "name": "inherits",
            "params": [
                {
                    "name": "src",
                    "description": "The original constructor to inherit",
                    "type": "Object"
                },
                {
                    "name": "ext",
                    "description": "The extension to the original class",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new prototype object",
                "type": "Object"
            },
            "example": [
                "\n    var Source = function () {}\n\n    Source.prototype = {\n        constructor: Source,\n\n        foo: function () {\n            window.console.log('foo::() called');\n        },\n\n        bar: function () {\n            window.console.log('bar::() was called');\n        }\n    }\n\n    Source.subClass = function (ext) {\n        return funkyJS.inherits(Source, ext);\n    }\n\n\n\n    var Extended = function () {}\n\n    Extended.prototype = Source.subClass({\n        constructor: Extended,\n\n        fooBar: function () {\n            this.foo();\n            this.bar();\n        }\n    });\n\n    Extended.subClass = function (ext) {\n        return funkyJS.inherits(Extended, ext);\n    }\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 523,
            "description": "The delegate function is a way to delegate the behaviour of one object to\n    other objects. It allows to specify the methods which are available\n    exclusive. This means, if no method is specified or none of the given\n    method names exists on the provider, no method will be available\n    on the receiver either. It is mostly useful if you have a certain\n    behaviour you want to share across instances or classes/prototypes",
            "itemtype": "method",
            "name": "delegate",
            "params": [
                {
                    "name": "provider",
                    "description": "The object which provides methods",
                    "type": "Object"
                },
                {
                    "name": "receiver",
                    "description": "The object on which the methods are called",
                    "type": "Object"
                },
                {
                    "name": "methods",
                    "description": "Names of method to provide",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The receiver",
                "type": "Object"
            },
            "example": [
                "\n    var earnsMoney = {\n        _parseCurrency: function (input) {\n            return '$' + (funkyJS.isNumber(input) ? input.toFixed(2) : '0.00');\n        },\n        income: function (input) {\n            var income = earnsMoney._parseCurrency(input);\n            this.salary = income;\n        },\n        incrementByPercentage: function (perc) {\n            var money = +(this.salary.replace('$', '')),\n                inc = funkyJS.isNumber(perc) && perc > 1 ? perc : 1;\n\n            this.income(money + (money/100 * inc));\n        }\n    }\n\n    var joe = {\n        name: 'joe'\n    }\n\n    joe = funkyJS.delegate(earnsMoney, joe, [\n        'income',\n        'incrementByPercentage'\n    ]);\n\n    joe.name;\n    // -> 'joe'\n\n    joe.income(1500);\n    joe.salary;\n    // -> '$1500.00'\n\n    joe.incrementByPercentage(6);\n    joe.salary;\n    // -> '$1590.00'\n\n    joe._parseCurrency;\n    // -> undefined\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\objects.js",
            "line": 607,
            "description": "The forward function can be used to achieve forwarding of method calls from\n    one object to another. This is useful if you want to use a object as\n    a property of some other object and want to share some methods from\n    the inner object on the outer one. It allows to specify the methods\n    exclusive. This means, if no method is specified or none of the given\n    method names exists on the receiver, no method will be available\n    on the forwarder either.",
            "itemtype": "method",
            "name": "forward",
            "params": [
                {
                    "name": "forwarder",
                    "description": "The objects which forwards the method calls",
                    "type": "Object"
                },
                {
                    "name": "receiver",
                    "description": "The object which receives the method calls",
                    "type": "Object"
                },
                {
                    "name": "methods",
                    "description": "Names of method to provide",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The forwarder",
                "type": "Object"
            },
            "example": [
                "\n    var joe = {\n        name: 'joe'\n    }\n\n    var familyStateManager =  {\n        marry: function () {\n            this.partner = 1;\n        }\n        divorce: function () {\n            this.partner = 0;\n        },\n        isMarried: function () {\n            return !!this.partner;\n        }\n    }\n\n    funkyJS.forward(joe, familyStateManager, [\n        'marry',\n        'divorce',\n        'isMarried'\n    ]);\n\n    joe.name;\n    // -> joe\n\n    joe.isMarried();\n    // -> false\n\n    joe.marry();\n    joe.isMarried();\n    // -> true\n\n    joe.divorce();\n    joe.isMarried();\n    // -> false\n\n    joe.partner;\n    // -> undefined\n"
            ],
            "class": "funkyJS",
            "module": "objects"
        },
        {
            "file": "sources\\type.js",
            "line": 41,
            "description": "The is function takes in the name of any internal [[Class]] and a value and\n    checks if the internal [[Class]] of the given value matches the given\n    name",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "cls",
                    "description": "Name of the internal [[Class]]",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True on match, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    var aString = 'string';\n    var aArray = [];\n\n    typeof aString === 'string';\n    // -> true\n\n    typeof aArray === 'array';\n    // -> false\n\n    funkyJS.is('string', aString);\n    // -> true\n\n    funkyJS.is('array', aArray);\n    // -> true\n\n    var isArray = funkyJS.is('array');\n\n    isArray(aArray);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 88,
            "description": "The isNull function takes in a value and checks if it is null",
            "itemtype": "method",
            "name": "isNull",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is null, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNull(null);\n    // -> true\n\n    funkyJS.isNull(undefined);\n    // -> false\n\n    funkyJS.isNull(0);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 115,
            "description": "The isNotNull function takes in a value and checks if it is not null",
            "itemtype": "method",
            "name": "isNotNull",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not null, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotNull(null);\n    // -> false\n\n    funkyJS.isNotNull(undefined);\n    // -> true\n\n    funkyJS.isNotNull(0);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 142,
            "description": "The isVoid function takes in a value and checks if it is undefined",
            "itemtype": "method",
            "name": "isVoid",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is undefined, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isVoid(undefined);\n    // -> true\n\n    funkyJS.isVoid(null);\n    // -> false\n\n    funkyJS.isVoid(0);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 169,
            "description": "The isNotVoid function takes in a value and checks if it is not undefined",
            "itemtype": "method",
            "name": "isNotVoid",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not undefined, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotVoid(undefined);\n    // -> false\n\n    funkyJS.isNotVoid(null);\n    // -> true\n\n    funkyJS.isNotVoid(0);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 196,
            "description": "The isNil function takes in a value and checks if it is null or undefined",
            "itemtype": "method",
            "name": "isNil",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is null or undefined, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNil(null);\n    // -> true\n\n    funkyJS.isNil(undefined);\n    // -> true\n\n    funkyJS.isNil(0);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 223,
            "description": "The isNotNil function takes in a value and checks if it is not null or undefined",
            "itemtype": "method",
            "name": "isNotNil",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not null or undefined, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotNil(0);\n    // -> true\n\n    funkyJS.isNotNil(null);\n    // -> false\n\n    funkyJS.isNotNil(undefined);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 250,
            "description": "The isBool function takes in a value and checks if it is a boolean",
            "itemtype": "method",
            "name": "isBool",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a boolean, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isBool(false);\n    // -> true\n\n    funkyJS.isBool('true');\n    // -> false\n\n    funkyJS.isBool(0);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 277,
            "description": "The isNotBool function takes in a value and checks if it is not a boolean",
            "itemtype": "method",
            "name": "isNotBool",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a boolean, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotBool(0);\n    // -> true\n\n    funkyJS.isNotBool('false');\n    // -> true\n\n    funkyJS.isNotBool(true);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 304,
            "description": "The isString function takes in a value and checks if it is a string",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a string, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isString('string');\n    // -> true\n\n    funkyJS.isString(undefined);\n    // -> false\n\n    funkyJS.isString(0);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 331,
            "description": "The isNotString function takes in a value and checks if it is not a string",
            "itemtype": "method",
            "name": "isNotString",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a string, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotString(0);\n    // -> true\n\n    funkyJS.isNotString(undefined);\n    // -> true\n\n    funkyJS.isNotString('string');\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 358,
            "description": "The isNumber function takes in a value and checks if it is a number (not NaN\n    and finite)",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a number, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNumber(0);\n    // -> true\n\n    funkyJS.isNumber(NaN);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 383,
            "description": "The isNotNumber function takes in a value and checks if it is not a number",
            "itemtype": "method",
            "name": "isNotNumber",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a number, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotNumber(0);\n    // -> false\n\n    funkyJS.isNotNumber(NaN);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 407,
            "description": "The isInt32 function takes in a value and checks if it is a integer",
            "itemtype": "method",
            "name": "isInt32",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a integer, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isInt32(1);\n    // -> true\n\n    funkyJS.isInt32(1.5);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 431,
            "description": "The isNotInt32 function takes in a value and checks if it is not a integer",
            "itemtype": "method",
            "name": "isNotInt32",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a integer, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotInt32(1);\n    // -> false\n\n    funkyJS.isNotInt32(1.5);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 455,
            "description": "The isFloat32 function takes in a value and checks if it is a floating point number",
            "itemtype": "method",
            "name": "isFloat32",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a floating point number, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isFloat32(1.5);\n    // -> true\n\n    funkyJS.isFloat32(1);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 479,
            "description": "The isNotFloat32 function takes in a value and checks if it is not a floating point number",
            "itemtype": "method",
            "name": "isNotFloat32",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a floating point number, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotFloat32(1.5);\n    // -> false\n\n    funkyJS.isNotFloat32(1);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 503,
            "description": "The isFunction function takes in a value and checks if it is a function",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a function, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isFunction(function () {});\n    // -> true\n\n    funkyJS.isFunction('function');\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 527,
            "description": "The isNotFunction function takes in a value and checks if it is not a function",
            "itemtype": "method",
            "name": "isNotFunction",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a function, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotFunction(function () {});\n    // -> false\n\n    funkyJS.isNotFunction('function');\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 551,
            "description": "The isArray function takes in a value and checks if it is a array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a array, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isArray([]);\n    // -> true\n\n    funkyJS.isArray({});\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 575,
            "description": "The isNotArray function takes in a value and checks if it is not a array",
            "itemtype": "method",
            "name": "isNotArray",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a array, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotArray([]);\n    // -> false\n\n    funkyJS.isNotArray({});\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 599,
            "description": "The isObject function takes in a value and checks if it is a object",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a object, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isObject({});\n    // -> true\n\n    funkyJS.isObject([]);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 623,
            "description": "The isNotObject function takes in a value and checks if it is not a object",
            "itemtype": "method",
            "name": "isNotObject",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a object, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotObject({});\n    // -> false\n\n    funkyJS.isNotObject([]);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 647,
            "description": "The isDate function takes in a value and checks if it is a Date() instance",
            "itemtype": "method",
            "name": "isDate",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a Date() instance, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isDate(new Date());\n    // -> true\n\n    funkyJS.isDate('2014-01-01');\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 671,
            "description": "The isNotDate function takes in a value and checks if it is not a Date() instance",
            "itemtype": "method",
            "name": "isNotDate",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a Date() instance, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotDate(new Date());\n    // -> false\n\n    funkyJS.isNotDate('2014-01-01');\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 695,
            "description": "The isRegex function takes in a value and checks if it is a regular expression",
            "itemtype": "method",
            "name": "isRegex",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a regular expression, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isRegex(/.+/);\n    // -> true\n\n    funkyJS.isRegex(' ');\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 719,
            "description": "The isNotRegex function takes in a value and checks if it is not a regular expression",
            "itemtype": "method",
            "name": "isNotRegex",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a regular expression, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotRegex(/.+/);\n    // -> false\n\n    funkyJS.isNotRegex(' ');\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 743,
            "description": "The isNode function takes in a value and checks if it is a DOM-Node",
            "itemtype": "method",
            "name": "isNode",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a DOM-Node, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNode(document.createElement('div'));\n    // -> true\n\n    funkyJS.isNode('<div></div>');\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 767,
            "description": "The isNotNode function takes in a value and checks if it is not a DOM-Node",
            "itemtype": "method",
            "name": "isNotNode",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a DOM-Node, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotNode(document.createElement('div'));\n    // -> false\n\n    funkyJS.isNotNode('<div></div>');\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 791,
            "description": "The isNodeList function takes in a value and checks if it is a list of DOM-Nodes",
            "itemtype": "method",
            "name": "isNodeList",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a list of DOM-Nodes, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNodeList(document.querySelectorAll('div'));\n    // -> true\n\n    funkyJS.isNodeList([]);\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 815,
            "description": "The isNotNodeList function takes in a value and checks if it is not a list of DOM-Nodes",
            "itemtype": "method",
            "name": "isNotNodeList",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a list of DOM-Nodes, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotNodeList(document.querySelectorAll('div'));\n    // -> false\n\n    funkyJS.isNotNodeList([]);\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 839,
            "description": "The isSequencial function takes in a value and checks if it is a sequencial enumerable",
            "itemtype": "method",
            "name": "isSequencial",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a sequencial enumerable, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isSequencial(document.querySelectorAll('div'));\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 863,
            "description": "The isNotSequencial function takes in a value and checks if it is not a sequencial enumerable",
            "itemtype": "method",
            "name": "isNotSequencial",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a sequencial enumerable, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotSequencial(document.querySelectorAll('div'));\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 884,
            "description": "The isEnumerable function takes in a value and checks if it is a enumerable",
            "itemtype": "method",
            "name": "isEnumerable",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is a enumerable, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isEnumerable(document.querySelectorAll('div'));\n    // -> true\n"
            ],
            "class": "funkyJS",
            "module": "type"
        },
        {
            "file": "sources\\type.js",
            "line": 905,
            "description": "The isNotEnumerable function takes in a value and checks if it is not a enumerable",
            "itemtype": "method",
            "name": "isNotEnumerable",
            "params": [
                {
                    "name": "x",
                    "description": "Value to check against",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "True if x is not a enumerable, false otherwise",
                "type": "Boolean"
            },
            "example": [
                "\n    funkyJS.isNotEnumerable(document.querySelectorAll('div'));\n    // -> false\n"
            ],
            "class": "funkyJS",
            "module": "type"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nEXPORT\n======",
            "line": " sources\\experiments\\contracts.js:358"
        },
        {
            "message": "Missing item type\nEXPORT\n======",
            "line": " sources\\experiments\\functors.js:40"
        },
        {
            "message": "Missing item type\nEXPORT\n======",
            "line": " sources\\combinators.js:408"
        },
        {
            "message": "Missing item type\nEXPORT\n======",
            "line": " sources\\decorators.js:445"
        }
    ]
}