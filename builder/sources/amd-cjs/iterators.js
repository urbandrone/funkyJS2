/*! funkyjs-2 2.1.0
 *  David Hofmann <the.urban.drone@gmail.com>, MIT license */
/* globals define, module, exports, require */
!function(a,b){var c,d;if("function"==typeof define&&define.amd)define(["../type","../array"],b);else if("object"==typeof exports)module.exports=b(require("type"),require("array"));else{c=b(a.funkyJS,a.funkyJS);for(d in c)c.hasOwnProperty(d)&&(a.funkyJS[d]=c[d])}}(this,function(a){function b(a){return a["@@iterator"]=function(){return a},a}var c={};return c.numIterator=function(c,d){var e=a.isNumber(c)?c:0,f="number"!=typeof d||isNaN(d)?1/0:d,g=1;return e>f&&(g=-1),b({next:function(){var a=e;return e+=g,a===f?{done:!0,value:void 0}:{done:!1,value:a}}})},c.seqIterator=function(c){var d;if(!a.isSequencial(c))throw"seqIterator expected argument to be sequencial but saw "+c;return d=-1,b({next:function(){return d+=1,d>=c.length?{done:!0,value:void 0}:{done:!1,value:c[d]}}})},c.objIterator=function(c){var d,e;if(!a.isObject(c))throw"objIterator expected argument to be object but saw "+c;return d=Object.keys(c),e=-1,b({next:function(){return e+=1,e>=d.length?{done:!0,value:void 0}:{done:!1,value:c[d[e]]}}})},c.mapLazy=function d(c,e){if("function"!=typeof c)throw"mapLazy expected first argument to be function but saw "+c;if(void 0===e)return function(a){return d(c,a)};if(!a.isIterator(e))throw"mapLazy expects last argument to be iterator but saw "+e;return b({next:function(){var a=e.next();return a.done?{done:!0,value:a.value}:{done:!1,value:c(a.value)}}})},c.filterLazy=function e(c,d){if("function"!=typeof c)throw"filterLazy expected first argument to be function but saw "+c;if(void 0===d)return function(a){return e(c,a)};if(!a.isIterator(d))throw"filterLazy expects last argument to be iterator but saw "+d;return b({next:function(){for(var a=d.next();!a.done&&!c(a.value);)a=d.next();return a.done?{done:!0,value:a.value}:{done:!1,value:a.value}}})},c.foldLazy=function f(c,d,e){var g;if("function"!=typeof c)throw"foldLazy expected first argument to be function but saw "+c;if(void 0===e)return function(a,b){return f(c,a,b)};if(void 0===d)return function(a){return f(c,e,a)};if(!a.isIterator(e))throw"foldLazy expects last argument to be iterator but saw "+e;return g=d,b({next:function(){var a=e.next();return a.done?{done:!0,value:g}:(g=c(g,a.value),{done:!1,value:g})}})},c});